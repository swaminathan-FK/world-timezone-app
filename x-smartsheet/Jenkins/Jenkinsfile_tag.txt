pipeline {
  agent any
  stages {
             stage('Build and Deploy to Standalone Server'){ 
		 
		     steps {
		     
		     script{
			 		       
		        //defining environment variables based on the opted environment from the job
		        
		        def deployenv =params.ENVIRONMENT_TO_DEPLOY
		        def versionv = deployenv+'_DEPLOY_MULE_VERSION'
		        def targetserverv=deployenv+'_DEPLOY_TARGET_SERVER'
		        def deployusernamev= deployenv+'_DEPLOY_ANYPOINT_USERNAME'
		        def deploypasswordv=deployenv+'_DEPLOY_ANYPOINT_PASSWORD'
		        def anypointurlv=deployenv+'_DEPLOY_ANYPOINT_URL'
		        def muledeployenvv = deployenv+'_DEPLOY_ENV_NAME'
		        
                //Assigning respective variables for deployment
                def version = env."${versionv}"
                def targetserver=env."${targetserverv}"
                def deployusername=env."${deployusernamev}"
                def deploypassword=env."${deploypasswordv}"
                def anypointurl=env."${anypointurlv}"
                def muledeployenv = env."${muledeployenvv}"
                
        //-----getting Application specific variable from config.json 
                def buildConfig = readJSON file: 'Jenkins/config.json'
		        def mulekey = buildConfig."${deployenv}".APP_MULEKEY
		        def muleenv = buildConfig."${deployenv}".ENV
		        
                sh """mvn --settings settings.xml clean deploy -Dmule_key=${mulekey} -Dmule_env=${muleenv} -DskipMunitTests  -DmuleDeploy -Dmule.version=${version} -Dtarget_server=${targetserver}   -Dusername=${deployusername}   -Dpassword=${deploypassword}   -Denv=${muledeployenv}  -Durl=${anypointurl}"""
               
			    
		        
		       } 
		      }
	         }
	        stage('Tagging the version to GITLAB'){ 
	
	        steps{
                 script{		 
                        def version = sh script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true
                        echo version
                        sh """

                        
                        git fetch --prune --prune-tags origin
                        git tag -a ${version} -m 'Tag added'
                        git push origin ${version}
                        """
                 }

             }
        }
}

}
